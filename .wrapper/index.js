import { build } from 'esbuild'
import babel from 'esbuild-plugin-babel'
import fs from 'fs/promises'
import path from 'path'
import { fileURLToPath } from 'url'
import { step, done } from './ui.js'
import config from '../script.config.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

async function main() {
    if (!config.manifest.name || !/^[-\w]+$/.test(config.manifest.name))
        return console.error('Error: Invalid plugin name specified in plugin.config.js'.red)

    step('Generating plugin wrapper')

    const template =
        `\/\/ Autogenerated file, do not edit!\n` +
        `manifest(${JSON.stringify(config.manifest)})\n` +
        `require('core-js/actual')\n` +
        `require(${JSON.stringify(path.join(__dirname, '..', config.main))})`

    await fs.writeFile(path.join(__dirname, 'wrapper.js'), template, { encoding: 'utf-8' })

    done()

    step('Building bundle')

    if (!await fs.access(path.resolve('dist')).then(() => true).catch(() => false))
        await fs.mkdir(path.resolve('dist'))

    await build({
        entryPoints: [path.join(__dirname, 'wrapper.js')],
        bundle: true,
        minify: true,
        outfile: path.resolve('dist', config.manifest.name + '.js'),
        plugins: [babel()]
    })

    done()

    step('Clearing cache')

    await fs.unlink(path.join(__dirname, 'wrapper.js'))

    done()
}

main().catch(err => {
    done(false)
    console.error(err)
})